1 ' Copyright (c) 2023 emef220 
2 ' Released under the MIT license
3 ' https://opensource.org/licenses/mit-license.php
4 '
5 ' --------------------------------------------------------------------------
6 ' 022_sprite_with_sintable_test_sc5c (_TUBOON)
7 ' --------------------------------------------------------------------------
10 CLS:COLOR 15,0,0: COLOR=NEW:SCREEN 5,2':OPEN "GRP:" FOR OUTPUT AS #1
20 _TURBOON
21 DIM ST%(64),DR%(32),SI%(32),CO%(32),SX%(32),SY%(32),EN%(32),DX%(32),DY%(32),SP%(32)
24 '#C+
27 'Next line is for MSX BASIC 3.0
28 'POKE &HFAFC,PEEK(&HFAFC) OR 1
30 DEFINTA-Z:PI=3.1415926:RD%=256:SC%=256:WY%=64
80 'GENERATE SINCOS Table
81 FOR I=0TOWY%-1:ST%(I)=SIN(PI*2*I/RD%)*SC%:NEXTI
90 'LOAD SPRITE
91 GOSUB 1010:B=0
110 'INITIALIZE SPRITE #0-#31
111 GOSUB 610
120 'ENABLE SPRITE#S
121 FORI=0TO31:S=IMOD32:IF EN%(31)=0 THEN SX%(S)=128:SY%(S)=105:DR%(S)=8*I:CO%(S)=ST%(63-(DR%(S)MOD64)):SI%(S)=ST%(DR%(S)MOD64):EN%(S)=1:PUT SPRITE S,(SX%(S),SY%(S)),2+SMOD8,0:NEXTI
125 'UPDATE X, Y
127 GOSUB 810
128 'WRITE SPRITE ATTRIBUTE
129 GOSUB 510
130 'B=B+1:IF B=32 THEN B=0
150 IF STICK(0) = 7 THEN END
145 GOTO 120
500 'UPDATE X AND Y IN SPRITE ATTRIBUTE
510 A=&H7600
520 FOR I=0TO31:X=SX%(I):Y=SY%(I):VPOKE A+4*I,Y:VPOKE A+4*I+1,X:NEXTI:RETURN
600 'INITIALIZE SPRITE
610 FORI=0TO31:DR%(I)=0:SX%(I)=128:SY%(I)=105:SP%(I)=1:EN%(I)=0:NEXTI:RETURN
700 'DISPLAY SPRITE
710 FORI=0TO31
720 IF EN%(I)=1 THEN PUT SPRITE I,(SX%(I),SY%(I)),2+IMOD8,0
730 NEXTI
740 RETURN
800 'UPDATE SPRITE #0 to #31
810 FORI=0TO31:S=I:GOSUB 910:NEXTI
820 RETURN
900 'UPDATE X, Y of SPRITE #S
910 IF EN%(S)=0 THEN RETURN
911 '
912 IF DR%(S)<64  THEN GOSUB 960:GOTO 920
913 IF DR%(S)<128 THEN GOSUB 970:GOTO 920
914 IF DR%(S)<192 THEN GOSUB 980:GOTO 920
915 IF DR%(S)>191 THEN GOSUB 990:GOTO 920
919 'Y>211 will be clipped
920 IF SX%(S)<7 OR SX%(S)>248 OR SY%(S)<7 OR SY%(S)>206 THEN EN%(S)=0:SY(S)=212:PUT SPRITE S,(SX%(S),SY%(S)),0,0
921 'IFSMOD24=0 THEN CLS
922 'PRINT#1,S":X"X(S)"Y"Y(S)"--DX"DX%(S)"DY"DY%(S)
923 RETURN
960 DX%(S)=DX%(S)+CO%(S):DY%(S)=DY%(S)+SI%(S):SX%(S)=SX%(S)-(DX%(S)>255):SY%(S)=SY%(S)-(DY%(S)>255):DX%(S)=DX%(S)AND&HFF:DY%(S)=DY%(S)AND&HFF:RETURN
970 DX%(S)=DX%(S)+CO%(S):DY%(S)=DY%(S)+SI%(S):SX%(S)=SX%(S)+(DX%(S)>255):SY%(S)=SY%(S)-(DY%(S)>255):DX%(S)=DX%(S)AND&HFF:DY%(S)=DY%(S)AND&HFF:RETURN
980 DX%(S)=DX%(S)+CO%(S):DY%(S)=DY%(S)+SI%(S):SX%(S)=SX%(S)-(DX%(S)>255):SY%(S)=SY%(S)+(DY%(S)>255):DX%(S)=DX%(S)AND&HFF:DY%(S)=DY%(S)AND&HFF:RETURN
990 DX%(S)=DX%(S)+CO%(S):DY%(S)=DY%(S)+SI%(S):SX%(S)=SX%(S)+(DX%(S)>255):SY%(S)=SY%(S)+(DY%(S)>255):DX%(S)=DX%(S)AND&HFF:DY%(S)=DY%(S)AND&HFF:RETURN
1000 ' --- Slot 0
1010 ' mask 0
1020 DATA &H03,&H0F,&H1F,&H3F,&H7F,&H7F,&HFF,&HFF
1030 DATA &HFF,&HFF,&H7F,&H7F,&H3F,&H1F,&H0F,&H03
1040 DATA &HC0,&HF0,&HE8,&HF4,&HFA,&HFE,&HFB,&HFF
1050 DATA &HFF,&HFF,&HFE,&HFE,&HFC,&HF8,&HF0,&HC0
1060 ' attr 0
1070 DATA &H0A,&H0A,&H0A,&H0A,&H0A,&H0A,&H0A,&H0A
1080 DATA &H0A,&H0A,&H0A,&H0A,&H0A,&H0A,&H0A,&H0A
1090 ' 
1100 ' --- Slot 1
1110 ' mask 0
1120 DATA &H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
1130 DATA &H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
1140 DATA &H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
1150 DATA &H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
1160 ' attr 0
1170 DATA &H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
1180 DATA &H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
1190 ' 
1200 ' --- Slot 2
1210 ' mask 0
1220 DATA &H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
1230 DATA &H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
1240 DATA &H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
1250 DATA &H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
1260 ' attr 0
1270 DATA &H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
1280 DATA &H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
1290 ' 
1300 ' --- Slot 3
1310 ' mask 0
1320 DATA &H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
1330 DATA &H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
1340 DATA &H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
1350 DATA &H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
1360 ' attr 0
1370 DATA &H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
1380 DATA &H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
1390 DATA *
10000 REM -- LOAD SPRITES
10010 S=&H7800'S=BASE(9)
10020 READ R$: IF R$="*" THEN RETURN ELSE VPOKE S,VAL(R$):S=S+1:GOTO 10020